/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import dominio.*;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.MatteBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.Element;
import manejoArchivos.ArchivoLectura;

/**
 *
 * @author culne
 */
public class RegistrarVuelo extends javax.swing.JFrame  {

    private final Sistema modelo;

    /**
     * Creates new form RegistrarVuelo
     *
     * @param unSistema
     */
    public RegistrarVuelo(Sistema unSistema) {
        this.modelo = unSistema;
        estiloEIdioma();
        initComponents();
        setTablaVacia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtCoinciden1 = new javax.swing.JLabel();
        archivos = new javax.swing.JFileChooser("src//archivos");
        txtArea = new javax.swing.JLabel();
        txtFila = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        txtCoinciden = new javax.swing.JLabel();
        txtNoCoinciden = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        txtCoinciden1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar Vuelos");
        setResizable(false);

        archivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archivosActionPerformed(evt);
            }
        });
        archivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivos.setFileFilter(new FileNameExtensionFilter("Texto (txt)","txt"));
        archivos.setApproveButtonText("Abrir");
        archivos.setMultiSelectionEnabled(false);

        txtArea.setText("Área:");

        txtFila.setText("Fila:");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "De", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setRowSelectionAllowed(false);
        tabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(3).setResizable(false);
            tabla.getColumnModel().getColumn(4).setResizable(false);
            tabla.getColumnModel().getColumn(5).setResizable(false);
            tabla.getColumnModel().getColumn(6).setResizable(false);
            tabla.getColumnModel().getColumn(7).setResizable(false);
            tabla.getColumnModel().getColumn(8).setResizable(false);
            tabla.getColumnModel().getColumn(9).setResizable(false);
            tabla.getColumnModel().getColumn(10).setResizable(false);
        }

        txtCoinciden.setText("Total coincidencias:");

        txtNoCoinciden.setText("Total diferencias:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtArea)
                                .addGap(42, 42, 42)
                                .addComponent(txtFila)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNoCoinciden)
                                    .addComponent(txtCoinciden)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(archivos, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(archivos, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArea)
                    .addComponent(txtFila))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(txtCoinciden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNoCoinciden)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        setBounds(0, 0, 582, 506);
    }// </editor-fold>//GEN-END:initComponents

    private void archivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archivosActionPerformed
        if (evt.getActionCommand().equals("ApproveSelection")) {
            Vuelo vuelo = this.registrarVuelo(archivos.getSelectedFile().getAbsolutePath());
            if (vuelo.isExitoso()) { //si el vuelo es exitoso lo muestro en la tabla
                int[] datosArchivos = vuelo.getCodigosDeCargas();//info pa cargar tabla
                boolean[] comparacion = comparacionManualArchivo(vuelo);//d q color cargo
                Carga[] aux = modelo.getCargaEnFila(vuelo.getFila(), vuelo.getAreaNro());
                int[] datosManuales = new int[10];
                for (int i = 0; i < 10; i++) {
                    if (aux[i] != null) {
                        datosManuales[i] = (aux[i].getCodigo());

                    } else {
                        datosManuales[i] = 0;
                    }
                }
                for (int i = 0; i < 10; i++) {
                    TableColumn column = tabla.getColumnModel().getColumn(i+1);
                    tabla.setValueAt(datosArchivos[i], 0, i + 1);
                    tabla.setValueAt(datosManuales[i], 1, i + 1);
                    if (comparacion[i]) {
                        column.setCellRenderer(new Render(Color.GREEN));
                    }else{
                        column.setCellRenderer(new Render(Color.red));
                    }
                }
                tabla.setValueAt("Archivos", 0, 0);
                tabla.setValueAt("Manual", 1, 0);
                txtCoinciden.setText("Total coincidencias " + vuelo.getCoincidencias());
                txtNoCoinciden.setText("Total diferencias " + vuelo.getDiferencias());
                txtArea.setText("Área: " + vuelo.getArea());
                txtFila.setText("Fila: " + vuelo.getFila());
            } else {
                this.setTablaVacia();
                JOptionPane.showMessageDialog(this, "Vuelo no exitoso. Cantidad de líneas de código de carga: " + vuelo.getCantLineasCodigo(), "Información", JOptionPane.INFORMATION_MESSAGE);
            }

        } else {
            //CANCELAR
            setTablaVacia();
            
            
        }

    }//GEN-LAST:event_archivosActionPerformed

    private void estiloEIdioma() {
        UIManager.put("archivos.openButtonText", "Abrir");
        UIManager.put("archivos.openButtonToolTipText", "Abrir");
        UIManager.put("archivos.cancelButtonText", "Cancelar");
        UIManager.put("archivos.cancelButtonToolTipText", "Cancelar");

        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RegistrarVuelo.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al cargar Look & Feel");
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser archivos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel txtArea;
    private javax.swing.JLabel txtCoinciden;
    private javax.swing.JLabel txtCoinciden1;
    private javax.swing.JLabel txtFila;
    private javax.swing.JLabel txtNoCoinciden;
    // End of variables declaration//GEN-END:variables

    private void setTablaVacia() {
        for (int i = 0; i < 10; i++) {
            tabla.setValueAt("", 0, i + 1);
            tabla.setValueAt("", 1, i + 1);
        }
        tabla.setValueAt("Archivos", 0, 0);
        tabla.setValueAt("Manual", 1, 0);
        tabla.getColumnModel().getColumn(0).setCellRenderer(new Render(Color.white)); 
        txtCoinciden.setText("Total coincidencias ");
        txtNoCoinciden.setText("Total diferencias ");
        txtArea.setText("Área: ");
        txtFila.setText("Fila: ");
        for (int i = 0; i < 10; i++) {
            TableColumn column = tabla.getColumnModel().getColumn(i+1);
            column.setCellRenderer(new Render(Color.white));
  
        }
    }

    public Vuelo registrarVuelo(String nombreArchivo) {
        ArchivoLectura al = new ArchivoLectura(nombreArchivo);
        File archivo = new File(nombreArchivo);

        String id = al.leerLineaSiguiente();

        String[] partes = al.leerLineaSiguiente().split("#");
        String area = partes[0];
        int fila = Integer.parseInt(partes[1]);

        Vuelo vuelo = new Vuelo(modelo.getDroneSegunId(id), area, fila - 1, archivo.getName(), false);
        modelo.agregarVuelo(vuelo,id); //agregar vuelo al dron corrspondiente
        int cantLineas = 0;
        String auxCodigos = "";
        while (al.hayMasLineas()) {
            auxCodigos += al.linea() + ",";
            cantLineas++;
        }

        if (cantLineas == 10) {
            vuelo.setExitoso(true);
            String[] partesCodigo = auxCodigos.split(",");
            int[] auxCodigosInt = new int[10];
            for (int i = 0; i < 10; i++) {
                auxCodigosInt[i] = Integer.parseInt(partesCodigo[i]);
            }
            vuelo.setCodigosDeCargas(auxCodigosInt);
        }
        vuelo.setCantLineasCodigo(cantLineas);

        modelo.getDroneSegunId(id).setTieneVuelo(true);
        this.modelo.actualizarListaDrones();
        return vuelo;
    }

    public boolean[] comparacionManualArchivo(Vuelo vuelo) {
        int[] archivo = vuelo.getCodigosDeCargas();
        boolean[] retorno = new boolean[10];
        int coincide = 0;
        int diferencias = 0;
        int fila = vuelo.getFila();
        String aux = vuelo.getArea();
        int area = 0;
        switch (aux) {
            case "A" -> {
                area = 0;
            }

            case "B" -> {
                area = 1;
            }

            case "C" -> {
                area = 2;
            }

            case "D" -> {
                area = 3;
            }

            case "E" -> {
                area = 4;
            }

            case "F" -> {
                area = 5;
            }
        }

        for (int i = 0; i < 10; i++) {
            if (modelo.getCargaEn(fila, i, area) == null) {
                if (archivo[i] == 0) {
                    coincide++;
                    retorno[i] = true;
                } else {
                    diferencias++;
                }
            } else if (modelo.getCargaEn(fila, i, area).getCodigo() == archivo[i]) {
                coincide++;
                retorno[i] = true;
            } else {
                diferencias++;
            }

        }

        vuelo.setCoincidencias(coincide);
        vuelo.setDiferencias(diferencias);

        return retorno;
    }
    
    
    
    //COLORES TABLA
    private class Render extends DefaultTableCellRenderer {

        Color backgroundColor;

        public Render(Color backgroundColor) {
            super();
            this.backgroundColor = backgroundColor;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            JComponent cell = (JComponent)super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);
            cell.setBackground(this.backgroundColor);
            super.setHorizontalAlignment(JLabel.CENTER);
            return cell;
        }
        
    }
    

}
